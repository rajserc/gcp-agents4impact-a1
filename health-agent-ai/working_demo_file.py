import os
from google.adk.agents import LlmAgent,Agent
from google.adk.tools.mcp_tool.mcp_toolset import McpToolset, \
                StdioServerParameters, StdioConnectionParams
from dotenv import load_dotenv
from google.adk.tools import agent_tool
import asyncio
import os
import google.auth
from google.genai import types
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools.bigquery import BigQueryCredentialsConfig, BigQueryToolset
from google.adk.tools.bigquery.config import BigQueryToolConfig, WriteMode
from google.adk.tools import google_search
from google.adk.tools import agent_tool

# Environment variables for agent configuration
DC_API_KEY = "UTx3ctQdiKUmDzDG2kDSJVdGVnhiMh8QxLVHLVA0GRm2AkVccpcZzE83sd2jMAmL"

if not DC_API_KEY:
    raise ValueError("Required environment variable DC_API_KEY is not set")

# """
# Instructions for a basic Data Commons Agent.
# """

# AGENT_INSTRUCTIONS = """
# Use the Data Commons MCP tools to respond to user queries. Cite the data source when possible.
# """
load_dotenv()
google_maps_api_key = "AIzaSyAhshHALo20t51K9E9CTeTUjvlmxkVpbmE"

# Environment variables for agent configuration
DC_API_KEY = os.environ.get("DC_API_KEY")
MODEL="gemini-2.5-flash"
MAIN_AGENT_INSTRUCTIONS="""
You are a friendly weather agent.
Answer questions related to weather forecast, air quality index and other inquiries related to these things.
You have 3 helper agents.
The weather_agent has access to weather information for accessing weather information,
The air_quality_bigquery_agent has access to a large database from the Air Quality Indexes for the years 2004 and 2005 containing all sorts to Air Quality Indexes that can be used,
The imagen_tool_agent_aqi generate images if requested,
You can use your tool to search for information about allergies and related health concerns online.
When you use the Google Search tool, always cite the source of the information you find.
"""
INSTR = f"""
You are an weather reporter.
Also, use your own knowledge about air quality and its impact on environment.
You can also use the Google Search tool to find relevant information on the web.
When you use the Google Search tool, always cite the source of the information you find.
"""
if not google_maps_api_key:
    print("WARNING: GOOGLE_MAPS_API_KEY is not set. Please set it as an environment variable or update it in the script.")


import time, uuid
from typing import Any, Dict, List, Optional

from google import genai
from google.genai import types
from google.cloud import storage
from google.adk.agents import Agent

# =========================
# Config
# =========================
IMAGE_BUCKET = "aqi-agent-generated-images-dar"  # must be public

# =========================
# Helpers
# =========================
def _ext_for_mime(mime_type: str) -> str:
    m = (mime_type or "").lower()
    if "jpeg" in m or "jpg" in m:
        return "jpg"
    if "webp" in m:
        return "webp"
    if "png" in m:
        return "png"
    if "gif" in m:
        return "gif"
    # default
    return "png"

def _public_gcs_url(bucket: str, blob_name: str) -> str:
    # Public URL that works without auth if bucket is public
    return f"https://storage.googleapis.com/{bucket}/{blob_name}"

def _upload_bytes_to_gcs(
    data: bytes,
    bucket: str,
    mime_type: str = "image/png",
    prefix: str = "generated",
) -> Dict[str, str]:
    client = storage.Client()
    bucket_obj = client.bucket(bucket)

    ext = _ext_for_mime(mime_type)
    blob_name = f"{prefix}/{int(time.time())}-{uuid.uuid4().hex}.{ext}"

    blob = bucket_obj.blob(blob_name)
    # Optionally set cache control if you want CDN/browser caching
    # blob.cache_control = "public, max-age=86400"
    blob.upload_from_string(data, content_type=mime_type)
    public_url = _public_gcs_url(bucket, blob_name)

    return {
        "gcs_uri": f"gs://{bucket}/{blob_name}",
        "public_url": public_url,
        "mime_type": mime_type,
        "filename": blob_name,
        "markdown": f'![{blob_name}]({public_url} "Generated by Imagen")',
    }

# =========================
# Tool
# =========================
def generate_image_tool(
    prompt: str,
    *,
    bucket: str = IMAGE_BUCKET,
    n: int = 1,
    return_text: bool = False,
) -> Dict[str, Any]:
    """
    Generate image(s) with Gemini 2.5 Flash Image (preview),
    upload to a (public) GCS bucket, and return lightweight URLs.

    Returns:
        {
          "status": "success",
          "images": [
            {"public_url": "...", "gcs_uri": "...", "mime_type": "...", "filename": "..."}
          ],
          "text": "optional textual output (if return_text=True)"
        }
    """
    #client = genai.Client(vertexai=True, api_key=None)

    client = genai.Client(vertexai=True, project=os.environ.get("GOOGLE_CLOUD_PROJECT"), location="global")


    contents = [types.Content(role="user", parts=[types.Part.from_text(text=prompt)])]
    # Keep tokens lean: default to IMAGE-only; include TEXT only if requested
    response_modalities = ["IMAGE"] + (["TEXT"] if return_text else [])

    cfg = types.GenerateContentConfig(
        temperature=1.0,
        top_p=0.95,
        max_output_tokens=4096,
        response_modalities=response_modalities,
        safety_settings=[
            types.SafetySetting(category="HARM_CATEGORY_HATE_SPEECH", threshold="OFF"),
            types.SafetySetting(category="HARM_CATEGORY_DANGEROUS_CONTENT", threshold="OFF"),
            types.SafetySetting(category="HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold="OFF"),
            types.SafetySetting(category="HARM_CATEGORY_HARASSMENT", threshold="OFF"),
        ],
    )

    try:
        stream = client.models.generate_content_stream(
            model="gemini-2.5-flash-image-preview",
            contents=contents,
            config=cfg,
        )

        outputs: List[Dict[str, str]] = []
        text_out: List[str] = []

        for chunk in stream:
            cand = getattr(chunk, "candidates", [None])[0]
            if not cand or not cand.content or not getattr(cand.content, "parts", None):
                continue

            for part in cand.content.parts:
                # Optional text (captions/notes)
                if getattr(part, "text", None):
                    text_out.append(part.text)

                # Image bytes
                inline = getattr(part, "inline_data", None)
                if inline and getattr(inline, "data", None):
                    info = _upload_bytes_to_gcs(
                        inline.data,
                        bucket=bucket,
                        mime_type=inline.mime_type or "image/png",
                    )
                    outputs.append(info)
                    if len(outputs) >= n:
                        break

            if len(outputs) >= n:
                break

        if not outputs and not text_out:
            return {"status": "error", "error_message": "No image or text returned."}

        result: Dict[str, Any] = {"status": "success", "images": outputs}
        if return_text and text_out:
            result["text"] = "\n".join(text_out)
        return result

    except Exception as e:
        print("ERROR generating image:", e)
        return {"status": "error", "error_message": str(e)}

# =========================
# Agent
# =========================

PROJECT_ID="qwiklabs-gcp-00-490fd0a08445"
DATASET_NAME="aqi_data"

adc, _ = google.auth.default()
bq_credentials = BigQueryCredentialsConfig(credentials=adc)

# Read-only tool config (blocks DDL/DML). You can change to WriteMode.ALLOWED later if needed.
bq_tool_cfg = BigQueryToolConfig(write_mode=WriteMode.BLOCKED)

# Instantiate the BigQuery toolset
bq_tools = BigQueryToolset(
    credentials_config=bq_credentials,
    bigquery_tool_config=bq_tool_cfg
)

DB_SCHEMA = """
{
  "table_name": "air_quality_data",
  "fields": [
    {
      "column_name": "Date",
      "data_type": "STRING"
    },
    {
      "column_name": "Time",
      "data_type": "STRING"
    },
    {
      "column_name": "CO(GT)",
      "data_type": "FLOAT64"
    },
    {
      "column_name": "PT08.S1(CO)",
      "data_type": "INT64"
    },
    {
      "column_name": "NMHC(GT)",
      "data_type": "INT64"
    },
    {
      "column_name": "C6H6(GT)",
      "data_type": "FLOAT64"
    },
    {
      "column_name": "PT08.S2(NMHC)",
      "data_type": "INT64"
    },
    {
      "column_name": "NOx(GT)",
      "data_type": "INT64"
    },
    {
      "column_name": "PT08.S3(NOx)",
      "data_type": "INT64"
    },
    {
      "column_name": "NO2(GT)",
      "data_type": "INT64"
    },
    {
      "column_name": "PT08.S4(NO2)",
      "data_type": "INT64"
    },
    {
      "column_name": "PT08.S5(O3)",
      "data_type": "INT64"
    },
    {
      "column_name": "T",
      "data_type": "FLOAT64"
    },
    {
      "column_name": "RH",
      "data_type": "FLOAT64"
    },
    {
      "column_name": "AH",
      "data_type": "FLOAT64"
    }
  ]
}
"""

BIGQUERY_INSTR = f"""
You are a data analysis agent with access to BigQuery tools.
The dataset you have access to contains information from the Air Quality Index
Only query the dataset `{PROJECT_ID}.{DATASET_NAME}`.
Fully qualify every table as `{PROJECT_ID}.{DATASET_NAME}.<table>`.
Never perform DDL/DML; SELECT-only. Return the SQL you ran along with a concise answer.
Here is the database schema, please study it {DB_SCHEMA}
"""

air_quality_bigquery_agent = Agent(
    model=MODEL,         # Works with ADK; requires a Gemini API key or Vertex AI setup
    name="air_quality_bigquery_agent",
    description="""Analyzes tables in a BigQuery dataset that contains food information from the Air Quality. Tables.""",
    instruction=BIGQUERY_INSTR,
    tools=[bq_tools],
)

agent_generation = types.GenerateContentConfig(
    temperature=0.6,
    top_p=0.9,
    max_output_tokens=2048,
)

imagen_tool_agent_aqi = Agent(
    model="gemini-2.5-flash",   # planner/brain model
    name="imagen_tool_agent_aqi",
    instruction=(
        "You generate images based on user prompts. "
        "When asked for an image, call `generate_image_tool` with a concise visual prompt. "
        "Return the Markdown from the tool output to the user so it can be displayed on their website."
    ),
    description="Agent that creates images via a custom tool powered by Gemini 2.5 Flash Image (preview).",
    tools=[generate_image_tool],
    generate_content_config=agent_generation,
)

weather_agent = LlmAgent(
      model="gemini-2.5-flash",
      name="weather_air_quality_advisor",
      instruction=(
          "You are a helpful assistant that provides weather and air quality insights. "
          "Given a city name or ZIP code, fetch weather and AQI data using Google Weather tools, "
          "interpret the air quality index (AQI) according to EPA standards, and recommend "
          "whether it is safe to go outside, especially for sensitive groups."
      ),
      tools=[
          McpToolset(
              connection_params=StdioConnectionParams(
                  server_params=StdioServerParameters(
                      command="npx",
                      args=["-y", "@modelcontextprotocol/server-google-maps"],
                      env={"GOOGLE_MAPS_API_KEY": google_maps_api_key},
                  ),
              ),
              # Filter for relevant tools in the Google Maps/Weather MCP suite
              tool_filter=["get_weather", "get_air_quality"],
          )
      ],
  )

agent_generation = types.GenerateContentConfig(
    temperature=0.6,
    top_p=0.9,
    max_output_tokens=32768,
)

air_quality_agent = Agent(
    model=MODEL,   # or your preferred Gemini model
    name="air_quality_agent",
    description=f"Answer questions about Air Quality Index and its related impact on health.",
    instruction=INSTR,
    tools=[
        google_search
    ],
    generate_content_config=agent_generation,
)

root_agent = Agent(
    name="main_agent",
    model=MODEL,
    description="Provides Answers to weather and air quality for given input query",
    instruction=MAIN_AGENT_INSTRUCTIONS,
    tools=[agent_tool.AgentTool(agent=air_quality_agent)],
    sub_agents=[air_quality_bigquery_agent, imagen_tool_agent_aqi, weather_agent],
    generate_content_config=agent_generation,
)
